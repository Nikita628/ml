
data_path=src/datasets_4h/large
unseen_path=src/datasets_4h/unseen

model predictions:
Prediction Threshold: 0.65
Accuracy: 0.647119742980956
Classification Report:
              precision    recall  f1-score   support

           0       0.60      0.93      0.73    246335
           1       0.82      0.35      0.50    235497

    accuracy                           0.65    481832
   macro avg       0.71      0.64      0.61    481832
weighted avg       0.71      0.65      0.61    481832


Prediction Threshold: 0.7
Accuracy: 0.6358627073336764
Classification Report:
              precision    recall  f1-score   support

           0       0.59      0.95      0.73    246335
           1       0.85      0.31      0.45    235497

    accuracy                           0.64    481832
   macro avg       0.72      0.63      0.59    481832
weighted avg       0.72      0.64      0.59    481832


Prediction Threshold: 0.75
Accuracy: 0.6243503959886434
Classification Report:
              precision    recall  f1-score   support

           0       0.58      0.96      0.72    246335
           1       0.88      0.27      0.41    235497

    accuracy                           0.62    481832
   macro avg       0.73      0.62      0.57    481832
weighted avg       0.72      0.62      0.57    481832


Prediction Threshold: 0.8
Accuracy: 0.6124416809178302
Classification Report:
              precision    recall  f1-score   support

           0       0.57      0.97      0.72    246335
           1       0.90      0.23      0.37    235497

    accuracy                           0.61    481832
   macro avg       0.73      0.60      0.55    481832
weighted avg       0.73      0.61      0.55    481832



training data config:
SequencesLabelsConfig(
  sequence_length=25,
  future_candles_count=6,
  atr_multiple=1.0,
  atr_length=7,
  pct_increase=2.5,
  prediction_type=PredictionType.next_close_direction,
)

label percentages:
{1: 48.87531292040085, 0: 51.12468707959915}

features config:
FeaturesConfig(
  sma_lengths=[],
  ema_lengths=[],
  rsi_lengths=[],
  stoch_k_lengths=[],
  stoch_d_lengths=[],
  stoch_k_smooth=[],
  mfi_lengths=[],
  adx_lengths=[],
  atr_lengths=[],
  std_lengths=[]
  bb_lengths=[]
  ichimoku=[]
  bb_stds=[]
)

model config:
def create_model(input_shape: tuple[int, int]) -> models.Sequential:
    model = models.Sequential()
    model.add(layers.Bidirectional(layers.LSTM(units=100, return_sequences=True), input_shape=input_shape))
    model.add(layers.Dropout(0.2))
    model.add(layers.Bidirectional(layers.LSTM(units=100, return_sequences=True)))
    model.add(layers.Dropout(0.2))
    model.add(layers.Bidirectional(layers.LSTM(units=100, return_sequences=True)))
    model.add(layers.Dropout(0.2))
    model.add(layers.Bidirectional(layers.LSTM(units=100)))
    model.add(layers.Dropout(0.2))
    model.add(layers.Dense(units=1, activation='sigmoid'))
    optimizer = optimizers.Adam(learning_rate=0.001, clipvalue=1.0)
    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
    return model

