
data_path=src/datasets_1d/small
unseen_path=src/datasets_1d/unseen

model predictions:
Prediction Threshold: 0.65
Accuracy: 0.508071367884452
Classification Report:
              precision    recall  f1-score   support

           0       0.50      0.99      0.67      1755
           1       0.71      0.04      0.07      1776

    accuracy                           0.51      3531
   macro avg       0.61      0.51      0.37      3531
weighted avg       0.61      0.51      0.37      3531


Prediction Threshold: 0.7
Accuracy: 0.5058057207589918
Classification Report:
              precision    recall  f1-score   support

           0       0.50      0.99      0.67      1755
           1       0.78      0.02      0.05      1776

    accuracy                           0.51      3531
   macro avg       0.64      0.51      0.36      3531
weighted avg       0.64      0.51      0.35      3531


Prediction Threshold: 0.75
Accuracy: 0.5043896913055792
Classification Report:
              precision    recall  f1-score   support

           0       0.50      1.00      0.67      1755
           1       0.81      0.02      0.04      1776

    accuracy                           0.50      3531
   macro avg       0.66      0.51      0.35      3531
weighted avg       0.66      0.50      0.35      3531


Prediction Threshold: 0.8
Accuracy: 0.5029736618521665
Classification Report:
              precision    recall  f1-score   support

           0       0.50      1.00      0.67      1755
           1       0.84      0.01      0.03      1776

    accuracy                           0.50      3531
   macro avg       0.67      0.51      0.35      3531
weighted avg       0.67      0.50      0.35      3531



training data config:
SequencesLabelsConfig(
  sequence_length=2,
  future_candles_count=3,
  atr_multiple=1.0,
  atr_length=7,
  pct_increase=2.5,
  prediction_type=PredictionType.next_close_direction,
)

label percentages:
{1: 50.300215248668856, 0: 49.699784751331144}

features config:
FeaturesConfig(
  sma_lengths=[],
  ema_lengths=[],
  rsi_lengths=[],
  stoch_k_lengths=[],
  stoch_d_lengths=[],
  stoch_k_smooth=[],
  mfi_lengths=[],
  adx_lengths=[],
  atr_lengths=[],
  std_lengths=[]
  bb_lengths=[]
  ichimoku=[]
  bb_stds=[]
)

model config:
def create_model(input_shape: tuple[int, int]) -> models.Sequential:
    model = models.Sequential()
    model.add(layers.Bidirectional(layers.LSTM(units=100, return_sequences=True), input_shape=input_shape))
    model.add(layers.Dropout(0.2))
    model.add(layers.Bidirectional(layers.LSTM(units=100, return_sequences=True)))
    model.add(layers.Dropout(0.2))
    model.add(layers.Bidirectional(layers.LSTM(units=100, return_sequences=True)))
    model.add(layers.Dropout(0.2))
    model.add(layers.Bidirectional(layers.LSTM(units=100)))
    model.add(layers.Dropout(0.2))
    model.add(layers.Dense(units=1, activation='sigmoid'))
    optimizer = optimizers.Adam(learning_rate=0.001, clipvalue=1.0)
    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
    return model

