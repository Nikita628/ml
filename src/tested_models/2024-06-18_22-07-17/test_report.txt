
data_path=src/datasets_1d/large
unseen_path=src/datasets_1d/unseen

accuracy = 0.7184489748972022

training data config:
SequencesLabelsConfig(
  sequence_length=10,
  future_candles_count=2,
  atr_multiple=1.0,
  atr_length=7,
  pct_increase=3,
  prediction_type=PredictionType.pct_increase,
)

label percentages:
{1: 35.27447975224791, 0: 64.72552024775209}

classification report:
              precision    recall  f1-score   support

           0       0.71      0.96      0.82     44809
           1       0.80      0.28      0.41     24745

    accuracy                           0.72     69554
   macro avg       0.76      0.62      0.61     69554
weighted avg       0.74      0.72      0.67     69554


features config:
FeaturesConfig(
  sma_lengths=[2, 3, 5, 7, 10],
  ema_lengths=[2, 3, 5, 7, 10],
  rsi_lengths=[2, 3, 5, 7, 10],
  stoch_k_lengths=[2, 3, 5, 7, 10],
  stoch_d_lengths=[2, 3, 5, 7, 10],
  stoch_k_smooth=[2, 3, 5, 7, 10],
  mfi_lengths=[2, 3, 5, 7, 10],
  adx_lengths=[2, 3, 5, 7, 10],
  atr_lengths=[2, 3, 5, 7, 10],
  std_lengths=[2, 3, 5, 7, 10]
  bb_lengths=[2, 3, 5, 7, 10]
  ichimoku=[(9, 26, 52), (5, 15, 30), (6, 13, 26), (3, 6, 12)]
  bb_stds=[1.0, 1.5, 2.0]
  is_pct=True
  is_slopes=False
  is_order=False
)

model config:
def create_model(input_shape: tuple[int, int]):
    # model = Sequential()
    # model.add(Bidirectional(LSTM(units=100, return_sequences=True), input_shape=input_shape))
    # model.add(Dropout(0.2))
    # model.add(Bidirectional(LSTM(units=250, return_sequences=True)))
    # model.add(Dropout(0.2))
    # model.add(Bidirectional(LSTM(units=150)))
    # model.add(Dropout(0.2))
    # model.add(Dense(units=1, activation='sigmoid'))
    # optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)
    # model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
    model = Sequential()
    model.add(Bidirectional(LSTM(units=200, return_sequences=True), input_shape=input_shape))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=300, return_sequences=True)))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=300, return_sequences=True)))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=200)))
    model.add(Dropout(0.2))
    model.add(Dense(units=1, activation='sigmoid'))
    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)
    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
    return model

