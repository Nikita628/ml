
data_path=src/datasets_1d/largeX2
unseen_path=src/datasets_1d/unseen

accuracy = 0.7061636966751523

training data config:
SequencesLabelsConfig(
  sequence_length=15,
  future_candles_count=2,
  atr_multiple=1.0,
  atr_length=7,
  pct_increase=3,
  prediction_type=PredictionType.pct_increase,
)

label percentages:
{0: 65.92901163139534, 1: 34.07098836860466}

classification report:
              precision    recall  f1-score   support

           0       0.70      0.98      0.82     76917
           1       0.84      0.17      0.28     39750

    accuracy                           0.71    116667
   macro avg       0.77      0.58      0.55    116667
weighted avg       0.74      0.71      0.63    116667


features config:
FeaturesConfig(
  sma_lengths=[],
  ema_lengths=[],
  rsi_lengths=[3, 5, 7, 10],
  stoch_k_lengths=[3, 5, 7, 10],
  stoch_d_lengths=[3, 5, 7, 10],
  stoch_k_smooth=[3, 5, 7, 10],
  mfi_lengths=[],
  adx_lengths=[],
  atr_lengths=[],
  std_lengths=[]
  bb_lengths=[]
  ichimoku=[]
  bb_stds=[]
)

model config:
def create_model(input_shape: tuple[int, int]):
    model = Sequential()
    model.add(Bidirectional(LSTM(units=100, return_sequences=True), input_shape=input_shape))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=100, return_sequences=True)))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=100, return_sequences=True)))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=100)))
    model.add(Dropout(0.2))
    model.add(Dense(units=1, activation='sigmoid'))
    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)
    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
    return model

