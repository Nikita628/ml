
data_path=src/datasets_1d/small
unseen_path=src/datasets_1d/unseen

accuracy = 0.46981794953688916

training data config:
SequencesLabelsConfig(
  sequence_length=2,
  future_candles_count=2,
  atr_multiple=1.0,
  atr_length=7,
  pct_increase=2,
  prediction_type=PredictionType.pct_increase,
)

label percentages:
{1: 45.304714449980835, 0: 37.76031685192283, 2: 16.934968698096334}

classification report:
              precision    recall  f1-score   support

           0       0.65      0.01      0.03      1193
           1       0.47      0.94      0.63      1402
           2       0.45      0.24      0.32       536

    accuracy                           0.47      3131
   macro avg       0.52      0.40      0.32      3131
weighted avg       0.54      0.47      0.35      3131


features config:
FeaturesConfig(
  sma_lengths=[2, 5, 7, 10, 15, 20, 30, 50, 100, 200],
  ema_lengths=[2, 5, 7, 10, 15, 20, 30, 50, 100, 200],
  rsi_lengths=[2, 3, 5, 7, 10, 15, 20, 25, 30],
  stoch_k_lengths=[2, 3, 5, 7, 10, 15, 20, 25, 30],
  stoch_d_lengths=[2, 3, 5, 7, 10, 15, 20, 25, 30],
  mfi_lengths=[2, 3, 5, 7, 10, 15, 20, 25, 30],
  adx_lengths=[2, 3, 5, 7, 10, 15, 20, 25, 30],
  atr_lengths=[2, 3, 5, 7, 10, 15, 20, 25, 30],
  std_lengths=[2, 3, 5, 7, 10, 15, 20, 25, 30]
  is_pct=True
  is_slopes=False
  is_order=False
)

model config:
def create_model(input_shape: tuple[int, int]):
    model = Sequential()
    model.add(Bidirectional(LSTM(units=200, return_sequences=True), input_shape=input_shape))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=300, return_sequences=True)))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=300, return_sequences=True)))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=200)))
    model.add(Dropout(0.2))
    model.add(Dense(units=3, activation='softmax'))
    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)
    model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    return model

