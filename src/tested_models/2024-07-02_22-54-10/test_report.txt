
data_path=src/datasets_1d/largeX2
unseen_path=src/datasets_1d/unseen

accuracy = 0.7020875305413863

training data config:
SequencesLabelsConfig(
  sequence_length=15,
  future_candles_count=2,
  atr_multiple=1.0,
  atr_length=7,
  pct_increase=3,
  prediction_type=PredictionType.pct_increase,
)

label percentages:
{0: 65.92235190433814, 1: 34.07764809566185}

classification report:
              precision    recall  f1-score   support

           0       0.69      0.98      0.81     76895
           1       0.84      0.16      0.26     39750

    accuracy                           0.70    116645
   macro avg       0.76      0.57      0.54    116645
weighted avg       0.74      0.70      0.63    116645


features config:
FeaturesConfig(
  sma_lengths=[2, 3, 5, 7, 10],
  ema_lengths=[2, 3, 5, 7, 10],
  rsi_lengths=[2, 3, 5, 7, 10],
  stoch_k_lengths=[2, 3, 5, 7, 10],
  stoch_d_lengths=[2, 3, 5, 7, 10],
  stoch_k_smooth=[2, 3, 5, 7, 10],
  mfi_lengths=[2, 3, 5, 7, 10],
  adx_lengths=[],
  atr_lengths=[2, 3, 5, 7, 10],
  std_lengths=[2, 3, 5, 7, 10]
  bb_lengths=[]
  ichimoku=[]
  bb_stds=[]
)

model config:
def create_model(input_shape: tuple[int, int]):
    model = Sequential()
    model.add(Bidirectional(LSTM(units=150, return_sequences=True), input_shape=input_shape))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=150, return_sequences=True)))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=150, return_sequences=True)))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=150)))
    model.add(Dropout(0.2))
    model.add(Dense(units=1, activation='sigmoid'))
    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)
    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
    return model

