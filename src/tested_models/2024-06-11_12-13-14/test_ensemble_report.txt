
data_path=src/datasets_1d/large
unseen_path=src/datasets_1d/unseen

accuracy = 0.7686918462773745

training data config:
SequencesLabelsConfig(
  sequence_length=15,
  future_candles_count=3,
  atr_multiple=1.0,
  atr_length=7,
  pct_increase=5,
  prediction_type=PredictionType.pct_increase,
)

label percentages:
{1: 30.51309098351622, 0: 69.48690901648378}

classification report:
              precision    recall  f1-score   support

           0       0.80      0.89      0.84     44171
           1       0.66      0.50      0.57     19346

    accuracy                           0.77     63517
   macro avg       0.73      0.69      0.71     63517
weighted avg       0.76      0.77      0.76     63517


features config:
FeaturesConfig(
  sma_lengths=[5, 10, 20, 50, 100, 200],
  ema_lengths=[3, 9, 12, 21, 30, 50, 100, 200],
  rsi_lengths=[2, 5, 7, 10, 14, 20, 30],
  stoch_lengths=[(5, 3, 3), (7, 3, 3), (9, 3, 3), (14, 3, 3), (21, 3, 3), (21, 7, 7)],
  mfi_lengths=[2, 5, 10, 14, 21],
  adx_lengths=[3, 7, 10, 14, 20],
  atr_lengths=[3, 7, 10, 14, 20],
  std_lengths=[3, 7, 10, 14, 20]
  is_pct=True
  is_slopes=False
  is_order=False
)

model config:
def create_model(input_shape: tuple[int, int]):
    # model = Sequential()
    # model.add(Bidirectional(LSTM(units=100, return_sequences=True), input_shape=input_shape))
    # model.add(Dropout(0.2))
    # model.add(Bidirectional(LSTM(units=250, return_sequences=True)))
    # model.add(Dropout(0.2))
    # model.add(Bidirectional(LSTM(units=150)))
    # model.add(Dropout(0.2))
    # model.add(Dense(units=1, activation='sigmoid'))
    # optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)
    # model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
    model = Sequential()
    model.add(Bidirectional(LSTM(units=200, return_sequences=True), input_shape=input_shape))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=300, return_sequences=True)))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=300, return_sequences=True)))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=200)))
    model.add(Dropout(0.2))
    model.add(Dense(units=1, activation='sigmoid'))
    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)
    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
    return model

