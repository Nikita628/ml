
timeframe 1d

accuracy = 0.6878400025376282

training data config:
SequencesLabelsConfig(
  sequence_length=7,
  future_candles_count=3,
  atr_multiple=1.0,
  atr_length=7,
  pct_increase=2.5,
  prediction_type=PredictionType.pct_increase,
)

classification report:
              precision    recall  f1-score   support

           0       0.69      0.75      0.72     33663
           1       0.68      0.61      0.65     29388

    accuracy                           0.69     63051
   macro avg       0.69      0.68      0.68     63051
weighted avg       0.69      0.69      0.69     63051


features config:
FeaturesConfig(
  sma_lengths=[2, 5, 10, 20, 50, 100, 200],
  ema_lengths=[2, 5, 10, 20, 50],
  rsi_lengths=[2, 5, 10, 15, 20],
  stoch_lengths=[2, 5, 10, 15, 20],
  stoch_ds=[3, 5, 7, 9],
  mfi_lengths=[2, 5, 10, 15, 20],
  adx_lengths=[2, 5, 10, 15, 20],
  atr_lengths=[2, 5, 10, 15, 20],
  std_lengths=[2, 5, 10, 15, 20]
  is_pct=True
  is_slopes=False
  is_order=False
)

model config:
def create_model(input_shape):
    # model = Sequential()
    # model.add(Bidirectional(LSTM(units=100, return_sequences=True), input_shape=input_shape))
    # model.add(Dropout(0.2))
    # model.add(Bidirectional(LSTM(units=250, return_sequences=True)))
    # model.add(Dropout(0.2))
    # model.add(Bidirectional(LSTM(units=150)))
    # model.add(Dropout(0.2))
    # model.add(Dense(units=1, activation='sigmoid'))
    # optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)
    # model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
    model = Sequential()
    model.add(Bidirectional(LSTM(units=200, return_sequences=True), input_shape=input_shape))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=250, return_sequences=True)))
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(units=200)))
    model.add(Dropout(0.2))
    model.add(Dense(units=1, activation='sigmoid'))
    optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)
    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
    return model

